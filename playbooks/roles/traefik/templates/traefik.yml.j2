version: "3.7"

services:
  traefik:
    image: "traefik:v2.4.7"
    restart: unless-stopped
    # pilot:
    #   token: "64251d56-2b5b-40e5-a4f7-b03fe357f272"
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Dashboard
        # Explicitly tell Traefik to expose this container
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        - traefik.http.routers.traefiks.rule=Host(`m.{{ app_domain }}`)
        - traefik.http.routers.traefiks.service=api@internal
        - traefik.http.routers.traefiks.tls.certresolver=leresolver
        - traefik.http.routers.traefiks.entrypoints=websecure

        # # Authentication
        - traefik.http.routers.traefiks.middlewares=traefik-auth
        - traefik.http.middlewares.traefik-auth.basicauth.users={{ traefik_auth }}

        # Global redirect to https
        - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
        - traefik.http.routers.http-catchall.entrypoints=web
        - traefik.http.routers.http-catchall.middlewares=redirect-to-https

        # Middleware redirect
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

        # Define the port inside of the Docker service to use
        - traefik.http.services.traefiks.loadbalancer.server.port=8080

        # Cyphers Key Exchange to 100%
        - traefik.http.middlewares.securedheaders.headers.forcestsheader=true
        - traefik.http.middlewares.securedheaders.headers.sslRedirect=true
        - traefik.http.middlewares.securedheaders.headers.STSPreload=true
        - traefik.http.middlewares.securedheaders.headers.ContentTypeNosniff=true
        - traefik.http.middlewares.securedheaders.headers.BrowserXssFilter=true
        - traefik.http.middlewares.securedheaders.headers.STSIncludeSubdomains=true
        - traefik.http.middlewares.securedheaders.headers.STSSeconds=315360000


        # test redirect to a host outside docker
        # - traefik.http.routers.website_router.rule=Host(`website.domain.tld`)
        # - traefik.http.routers.website_router.entrypoints=websecure
        # - traefik.http.routers.website_router.tls.certresolver=leresolver
        # - traefik.http.routers.website_router.service=sonarr_service
        # - traefik.http.services.website_service.loadbalancer.server.url=http://ip_on_host_network
        # - traefik.http.services.website_service.loadbalancer.server.port=website_port
    command:
      - --providers.docker=true
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker.exposedbydefault=false
      # Uncomment if you want to use letsencrypt encrypt staging server (we use this to avoid rate limits)
      # - --certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.leresolver.acme.email={{ traefik_acme_email }}
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      # config to get qualys-ssl-labs-testssl grade A
      - "--providers.file.filename=/traefik_conf.yml"
      # Enable the access log, with HTTP requests
      - --accesslog
      - --log
      # Enable the Dashboard and API
      - --api
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - {{ traefik_dir }}/traefik_conf.yml:/traefik_conf.yml
      # Mount the volume to store the certificates
      - traefik-public-certificates:/letsencrypt

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true
